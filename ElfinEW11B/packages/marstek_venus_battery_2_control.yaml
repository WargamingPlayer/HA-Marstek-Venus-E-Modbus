# ----------------------
# Version: 0.0.5
# By: WargamingPlayer
# Fork of https://github.com/Superduper1969/MarstekVenus-ElfinEW11
# ----------------------

# ------
# MODBUS
# ------
modbus:
  - name: MarstekVenus2
    type: tcp
    host: [YourIPGoesHere]
    port: 502
    delay: 1
    message_wait_milliseconds: 35
    timeout: 5

    sensors:
      - name: "Marstek 2 Name"
        unique_id: marstek_2_name
        address: 31000
        slave: 1
        scan_interval: 300
        input_type: holding
        data_type: custom
        count: 10
        structure: ">20s"

      - name: "Marstek 2 WiFi SSID"
        unique_id: marstek_2_wifi_ssid
        address: 41500
        slave: 1
        scan_interval: 300
        input_type: holding
        data_type: custom
        count: 16
        structure: ">32s"

      - name: "Marstek 2 MAC"
        unique_id: marstek_2_mac
        address: 30402
        slave: 1
        scan_interval: 300
        input_type: holding
        data_type: custom
        count: 6
        structure: ">2c2c2c2c2c2c"
      #        structure: ">12c"

      - name: "Marstek 2 WiFi Status"
        unique_id: marstek_2_wifi_status
        address: 30300
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        state_class: measurement

      - name: "Marstek 2 BT Status"
        unique_id: marstek_2_bt_status
        address: 30301
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        state_class: measurement

      - name: "Marstek 2 Cloud Status"
        unique_id: marstek_2_cloud_status
        address: 30302
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        state_class: measurement

      - name: "Marstek 2 WiFi Signal strength"
        unique_id: marstek_2_wifi_signal_strength
        address: 30303
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: uint16
        unit_of_measurement: dBm
        device_class: signal_strength
        state_class: measurement
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Battery Voltage"
        unique_id: marstek_2_battery_voltage
        address: 32100
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: uint16
        unit_of_measurement: V
        device_class: voltage
        state_class: measurement
        scale: 0.01
        offset: 0
        precision: 1

      - name: "Marstek 2 Battery Current"
        unique_id: marstek_2_battery_current
        address: 32101
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: int16
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.01
        offset: 0
        precision: 1

      - name: "Marstek 2 Battery Power"
        unique_id: marstek_2_battery_power
        address: 32102
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: int32
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Battery SOC"
        unique_id: marstek_2_battery_soc
        address: 32104
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: "%"
        device_class: battery
        state_class: measurement
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Battery Energy"
        unique_id: marstek_2_battery_energy
        address: 32105
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: kWh
        device_class: power
        state_class: measurement
        scale: 0.001
        offset: 0
        precision: 0

      - name: "Marstek 2 AC Voltage"
        unique_id: marstek_2_ac_voltage
        address: 32200
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: V
        device_class: voltage
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 AC Current"
        unique_id: marstek_2_ac_current
        address: 32201
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int16
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.01
        offset: 0
        precision: 1

      - name: "Marstek 2 AC Power"
        unique_id: marstek_2_ac_power
        address: 32202
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: int32
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        offset: 0
        precision: 0

      #    - name: "Marstek 2 AC Frequency"
      #      unique_id: marstek_2_ac_frequency
      #      address: 32204
      #      slave: 1
      #      scan_interval: 30
      #      input_type: holding
      #      data_type: uint16
      #      unit_of_measurement: Hz
      #      device_class: frequency
      #      state_class: measurement
      #      scale: 0.01
      #      offset: 0
      #      precision: 2

      - name: "Marstek 2 AC Offgrid Voltage"
        unique_id: marstek_2_ac_offgrid_voltage
        address: 32300
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: uint16
        unit_of_measurement: V
        device_class: voltage
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 AC Offgrid Current"
        unique_id: marstek_2_ac_offgrid_current
        address: 32301
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int16
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.01
        offset: 0
        precision: 1

      - name: "Marstek 2 AC Offgrid Power"
        unique_id: marstek_2_ac_offgrid_power
        address: 32302
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int32
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Internal Temperature"
        unique_id: marstek_2_internal_temperature
        address: 35000
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int16
        unit_of_measurement: °C
        device_class: temperature
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 Internal MOS1 Temperature"
        unique_id: marstek_2_internal_mos1_temperature
        address: 35001
        slave: 1
        scan_interval: 600
        input_type: holding
        data_type: int16
        unit_of_measurement: °C
        device_class: temperature
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 Internal MOS2 Temperature"
        unique_id: marstek_2_internal_mos2_temperature
        address: 35002
        slave: 1
        scan_interval: 600
        input_type: holding
        data_type: int16
        unit_of_measurement: °C
        device_class: temperature
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 Max Cell Temperature"
        unique_id: marstek_2_max_cell_temperature
        address: 35010
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int16
        unit_of_measurement: °C
        device_class: temperature
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 Min Cell Temperature"
        unique_id: marstek_2_min_cell_temperature
        address: 35011
        slave: 1
        scan_interval: 30
        input_type: holding
        data_type: int16
        unit_of_measurement: °C
        device_class: temperature
        state_class: measurement
        scale: 0.1
        offset: 0
        precision: 1

      - name: "Marstek 2 Inverter State"
        unique_id: marstek_2_inverter_state
        address: 35100
        slave: 1
        scan_interval: 5
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        state_class: measurement

      # Read 3 at once
      # 35010, unit16, "Marstek 2 Battery Charge Voltage Limit", 0.1, V
      # 35011, unit16, "Marstek 2 Battery Charge Current Limit", 0.1, A
      # 35012, unit16, "Marstek 2 Battery Discharge Current Limit", 0.1, A
      - name: "Marstek 2 Battery Charge Limits"
        unique_id: marstek_2_battery_charge_limits
        address: 35110
        input_type: holding
        data_type: custom
        count: 3
        structure: ">3H"
        scan_interval: 90

      - name: "Marstek 2 Battery Maximum Cell Voltage"
        unique_id: marstek_2_battery_maximum_cell_voltage
        address: 37007
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: uint16
        unit_of_measurement: "V"
        state_class: measurement
        scale: 0.001
        offset: 0
        precision: 3

      - name: "Marstek 2 Battery Minimum Cell Voltage"
        unique_id: marstek_2_battery_minimum_cell_voltage
        address: 37008
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: uint16
        unit_of_measurement: "V"
        state_class: measurement
        scale: 0.001
        offset: 0
        precision: 3

      - name: "Marstek 2 RS485 Control Mode"
        unique_id: marstek_2_rs485_control_mode
        address: 42000
        slave: 1
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Force Charge/Discharge Mode"
        unique_id: marstek_2_force_charge_discharge_mode
        address: 42010
        slave: 1
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Charge to SOC"
        unique_id: marstek_2_charge_to_soc
        address: 42011
        slave: 1
        input_type: holding
        data_type: uint16
        unit_of_measurement: "%"
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Forcible Charge Power"
        unique_id: marstek_2_forcible_charge_power
        address: 42020
        slave: 1
        input_type: holding
        data_type: uint16
        unit_of_measurement: W
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Forcible Discharge Power"
        unique_id: marstek_2_forcible_discharge_power
        address: 42021
        slave: 1
        input_type: holding
        data_type: uint16
        unit_of_measurement: W
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 User Work Mode"
        unique_id: marstek_2_user_work_mode
        address: 43000
        slave: 1
        scan_interval: 10
        input_type: holding
        data_type: uint16
        unit_of_measurement: ""
        scale: 1
        offset: 0
        precision: 0

      - name: "Marstek 2 Capacity and Power registers"
        unique_id: marstek_2_capacity_and_power_registers
        address: 44000
        scan_interval: 10
        slave: 1
        input_type: holding
        data_type: custom
        count: 4
        structure: ">4H"

      - name: "Marstek 2 Alarm State"
        unique_id: marstek_2_alarm_state
        address: 36000
        scan_interval: 60
        slave: 1
        input_type: holding
        data_type: custom
        count: 2
        structure: ">2H"

      - name: "Marstek 2 Fault State"
        unique_id: marstek_2_fault_state
        address: 36100
        scan_interval: 60
        slave: 1
        input_type: holding
        data_type: custom
        count: 4
        structure: ">4H"

    switches:
      - name: "Marstek 2 Power Restriction (800W)"
        unique_id: marstek_2_power_restriction
        slave: 1
        address: 41010
        command_on: 1
        command_off: 0
        write_type: holding
        verify:
          address: 41010
          delay: 30
          input_type: holding
          state_on: 1
          state_off: 0

      - name: "Marstek 2 Backup Enabled"
        unique_id: marstek_2_backup_enabled
        slave: 1
        address: 41200
        command_on: 0
        command_off: 1
        write_type: holding
        verify:
          address: 41200
          delay: 10
          input_type: holding
          state_on: 0
          state_off: 1

# ------------
# INPUT NUMBER
# ------------
input_number:
  marstek_2_discharging_charging_power:
    name: "Marstek 2 (dis)charging power"
    min: -2500
    max: 2500
    step: 50
    unit_of_measurement: W
    mode: slider

  marstek_2_set_max_discharging_power:
    name: "Marstek 2 Set Maximum discharging power"
    min: 50
    max: 2500
    step: 10
    unit_of_measurement: W
    mode: box

  marstek_2_set_max_charging_power:
    name: "Marstek 2 Set Maximum charging power"
    min: 50
    max: 2500
    step: 50
    unit_of_measurement: W
    mode: box

  marstek_2_set_battery_min_soc:
    name: "Marstek 2 Set Battery minimum SOC (Discharge)"
    min: 11
    max: 25
    step: 0.1
    unit_of_measurement: "%"
    mode: box

  marstek_2_set_battery_max_soc:
    name: "Marstek 2 Set Battery maximum SOC (Charge)"
    min: 75
    max: 100
    step: 0.1
    unit_of_measurement: "%"
    mode: box

# ------------
# INPUT SELECT
# ------------
input_select:
  marstek_2_user_work_mode_input_select:
    name: Marstek 2 User Work Mode
    options:
      - "Manual"
      - "Anti-Feed"
      - "Trade"

# -------
# SCRIPTS
# -------
script:
  marstek_2_set_forcible_charge:
    sequence:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: input_number.marstek_2_discharging_charging_power
                above: -1
                below: 1
            sequence:
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42010
                  slave: 1
                  value: 0
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42020
                  slave: 1
                  value: 0
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42021
                  slave: 1
                  value: 0
          - conditions:
              - condition: numeric_state
                entity_id: input_number.marstek_2_discharging_charging_power
                above: -2501
                below: -10
            sequence:
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42021
                  slave: 1
                  value: "{{states('input_number.marstek_2_discharging_charging_power')|int|abs}}"
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42010
                  slave: 1
                  value: 2
          - conditions:
              - condition: numeric_state
                entity_id: input_number.marstek_2_discharging_charging_power
                above: 10
                below: 2501
            sequence:
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42020
                  slave: 1
                  value: "{{states('input_number.marstek_2_discharging_charging_power')|int|abs}}"
              - action: modbus.write_register
                data:
                  hub: MarstekVenus2
                  address: 42010
                  slave: 1
                  value: 1
    alias: Marstek 2 Set Forcible Charge
    description: ""
    icon: mdi:battery-charging-40

# -----------
# AUTOMATIONS
# -----------
automation:
  - id: marstek_2_sync_modbus_and_input_select
    alias: "Marstek 2 Sync Modbus and Input Select"
    description: "sync modbus sensor with input select "
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.marstek_2_user_work_mode
        id: sensor_marstek_2_to_input_select
      - trigger: state
        entity_id:
          - input_select.marstek_2_user_work_mode_input_select
        id: input_select_to_sensor_marstek_2
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - sensor_marstek_2_to_input_select
            sequence:
              - action: input_select.select_option
                metadata: {}
                data:
                  option: >
                    {% if states('sensor.marstek_2_user_work_mode') | int == 0 %}
                      Manual
                    {% elif states('sensor.marstek_2_user_work_mode') | int == 1 %}
                      Anti-Feed
                    {% elif states('sensor.marstek_2_user_work_mode') | int == 2 %}
                      Trade
                    {% else %}
                      Manual
                    {% endif %}
                target:
                  entity_id: input_select.marstek_2_user_work_mode_input_select
          - conditions:
              - condition: trigger
                id:
                  - input_select_to_sensor_marstek_2
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus2
                  address: 43000
                  slave: 1
                  value: >
                    {% if is_state('input_select.marstek_2_user_work_mode_input_select',
                    'Manual') %}
                      0
                    {% elif is_state('input_select.marstek_2_user_work_mode_input_select',
                    'Anti-Feed') %}
                      1
                    {% elif is_state('input_select.marstek_2_user_work_mode_input_select',
                    'Trade') %}
                      2
                    {% else %}
                      0
                    {% endif %}

  - id: marstek_2_sync_modbus_and_max_charge
    alias: "Marstek 2 Sync Modbus and Maximum Charge"
    description: "sync modbus sensor with maximum charge"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.marstek_2_capacity_and_power_registers
        id: max_sensor_marstek_2_to_charge_input_number
      - trigger: state
        entity_id:
          - input_number.marstek_2_set_max_charging_power
        id: charge_input_number_to_max_sensor_marstek_2
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - max_sensor_marstek_2_to_charge_input_number
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.marstek_2_capacity_and_power_registers').split(',')[2] | int | abs }}"
                target:
                  entity_id: input_number.marstek_2_set_max_charging_power
          - conditions:
              - condition: trigger
                id:
                  - charge_input_number_to_max_sensor_marstek_2
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus2
                  slave: 1
                  address: 44002
                  value: "{{ states('input_number.marstek_2_set_max_charging_power') | int | abs }}"

  - id: marstek_2_sync_modbus_and_max_discharge
    alias: "Marstek 2 Sync Modbus and Maximum Discharge"
    description: "sync modbus sensor with maximum discharge"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.marstek_2_capacity_and_power_registers
        id: max_sensor_marstek_2_to_discharge_input_number
      - trigger: state
        entity_id:
          - input_number.marstek_2_set_max_discharging_power
        id: discharge_input_number_to_max_sensor_marstek_2
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - max_sensor_marstek_2_to_discharge_input_number
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ states('sensor.marstek_2_capacity_and_power_registers').split(',')[3] | int | abs }}"
                target:
                  entity_id: input_number.marstek_2_set_max_discharging_power
          - conditions:
              - condition: trigger
                id:
                  - discharge_input_number_to_max_sensor_marstek_2
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus2
                  slave: 1
                  address: 44003
                  value: "{{ states('input_number.marstek_2_set_max_discharging_power') | int | abs }}"

  - id: marstek_2_sync_modbus_and_battery_min_soc
    alias: "Marstek 2 Sync Modbus and Min SOC"
    description: "sync modbus sensor with min SOC"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.marstek_2_capacity_and_power_registers
        id: min_soc_sensor_marstek_2_to_min_soc_input_number
      - trigger: state
        entity_id:
          - input_number.marstek_2_set_battery_min_soc
        id: min_soc_input_number_to_min_soc_sensor_marstek_2
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - min_soc_sensor_marstek_2_to_min_soc_input_number
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ (( states('sensor.marstek_2_capacity_and_power_registers').split(',')[1] | float / 10 ) - 1 ) | round(1) }}"
                target:
                  entity_id: input_number.marstek_2_set_battery_min_soc
          - conditions:
              - condition: trigger
                id:
                  - min_soc_input_number_to_min_soc_sensor_marstek_2
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus2
                  slave: 1
                  address: 44001
                  value: "{{ ((( states('input_number.marstek_2_set_battery_min_soc') | int + 1 ) | float ) * 10 ) | int | abs }}"

  - id: marstek_2_sync_modbus_and_battery_max_soc
    alias: "Marstek 2 Sync Modbus and Max SOC"
    description: "sync modbus sensor with min SOC"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.marstek_2_capacity_and_power_registers
        id: max_soc_sensor_marstek_2_to_max_soc_input_number
      - trigger: state
        entity_id:
          - input_number.marstek_2_set_battery_max_soc
        id: max_soc_input_number_to_max_soc_sensor_marstek_2
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - max_soc_sensor_marstek_2_to_max_soc_input_number
            sequence:
              - action: input_number.set_value
                metadata: {}
                data:
                  value: "{{ (( states('sensor.marstek_2_capacity_and_power_registers').split(',')[0] | float / 10 ) ) | round(1) }}"
                target:
                  entity_id: input_number.marstek_2_set_battery_max_soc
          - conditions:
              - condition: trigger
                id:
                  - max_soc_input_number_to_max_soc_sensor_marstek_2
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus2
                  slave: 1
                  address: 44000
                  value: "{{ ((( states('input_number.marstek_2_set_battery_max_soc') | int ) | float ) * 10 ) | int | abs }}"

# ----------------
# TEMPLATE SENSORS
# ----------------
template:
  - sensor:
      - name: "Marstek 2 Charging in W"
        unique_id: marstek_2_charging_in_w
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {% if states('sensor.marstek_2_ac_power') | float < 0 %}
            {{ (states('sensor.marstek_2_ac_power') | float) *-1 }}
          {% else %}
            0
          {% endif %}

      - name: "Marstek 2 Discharging in W"
        unique_id: marstek_2_discharging_in_w
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {% if states('sensor.marstek_2_ac_power') | float > 0 %}
            {{ (states('sensor.marstek_2_ac_power') | float) }}
          {% else %}
            0
          {% endif %}

      - name: "Marstek 2 Force Charge/Discharge Mode Status"
        unique_id: marstek_2_force_charge_discharge_mode_status
        state: >
          {% set mode = states('sensor.marstek_2_force_charge_discharge_mode') | int %}
          {% if mode == 0 %}
            Stop
          {% elif mode == 1 %}
            Charge
          {% elif mode == 2 %}
            Discharge
          {% else %}
            Unknown
          {% endif %}

      - name: "Marstek 2 RS485 Control Mode Status"
        unique_id: marstek_2_rs485_control_mode_status
        state: >
          {% set mode = states('sensor.marstek_2_rs485_control_mode') | int %}
          {% if mode == 21930 %}
            Enabled
          {% elif mode == 21947 %}
            Disabled
          {% else %}
            Unknown
          {% endif %}

      - name: "Marstek 2 State"
        unique_id: marstek_2_state
        state: >
          {% set mapping = {
            0:'Sleep',
            1:'Standby',
            2:'Charge',
            3:'Discharge',
            4:'Backup mode',
            5:'OTA upgrade' } %}
          {{ mapping[states('sensor.marstek_2_inverter_state') | int] }}

      - name: "Marstek 2 Operational mode"
        unique_id: marstek_2_operational mode
        state: >
          {% set mapping = {
            0:'Manual',
            1:'Anti-Feed',
            2:'Trade' } %}
          {{ mapping[states('sensor.marstek_2_user_work_mode') | int] }}

      # marstek_2_alarm_state
      # reg 0 bit 0 PLL Abnormal Restart
      # reg 0 bit 1 Overtemperature Limit
      # reg 0 bit 2 Low Temperature Limit
      # reg 0 bit 3 Fan Abnormal Warning
      # reg 0 bit 4 Low Battery SOC Warning
      # reg 0 bit 5 Output Overcurrent Warning
      # reg 0 bit 6 Abnormal Line Sequence Detection
      - name: "Marstek 2 Alarm PLL Abnormal Restart"
        unique_id: marstek_2_alarm_PLL_abnormal_restart
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x01 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Overtemperature Limit"
        unique_id: marstek_2_alarm_overtemperature_limit
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x02 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Low Temperature Limit"
        unique_id: marstek_2_alarm_low_temperature_limit
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x48 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Fan Abnormal Warning"
        unique_id: marstek_2_alarm_fan_abnormal_warning
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x08 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Low Battery SOC Warning"
        unique_id: marstek_2_alarm_low_battery_SOC_warning
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x10 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Output Overcurrent Warning"
        unique_id: marstek_2_alarm_output_overcurrent_warning
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x20 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Abnormal Line Sequence Detection"
        unique_id: marstek_2_alarm_abnormal_line_sequence_detection
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[0] %}
          {% set mask= 0x40 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      # marstek_2_alarm_state
      # reg 1 bit 0 WIFI Abnormal
      # reg 1 bit 1 Blutooth Abnormal
      # reg 1 bit 2 Network Abnormal
      # reg 1 bit 3 CT Connection Abnormal
      - name: "Marstek 2 Alarm WIFI abnormal"
        unique_id: marstek_2_alarm_wifi_abnormal
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[1] %}
          {% set mask= 0x01 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Blutooth abnormal"
        unique_id: marstek_2_alarm_blutooth_abnormal
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[1] %}
          {% set mask= 0x02 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm Network abnormal"
        unique_id: marstek_2_alarm_network_abnormal
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[1] %}
          {% set mask= 0x48 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Alarm CT connection abnormal"
        unique_id: marstek_2_alarm_ct_connection_abnormal
        state: >
          {% if has_value('sensor.marstek_2_alarm_state') %}
          {% set values= states('sensor.marstek_2_alarm_state') %}
          {% set code= values.split(',')[1] %}
          {% set mask= 0x08 %}
          {{ code | int | bitwise_and(mask) }}
          {% else %}
          0
          {% endif %}

      - name: "Marstek 2 Battery maximum SOC (Charge)"
        unique_id: marstek_2_battery_maximum_soc
        unit_of_measurement: "%"
        state: >
          {{ ((states('sensor.marstek_2_capacity_and_power_registers').split(',')[0] | float ) / 10) | round(1) }}

      - name: "Marstek 2 Battery minimum SOC (Discharge)"
        unique_id: marstek_2_battery_minimum_soc
        unit_of_measurement: "%"
        state: >
          {{ (((states('sensor.marstek_2_capacity_and_power_registers').split(',')[1] | float ) / 10) - 1 ) | round(1) }}

      - name: "Marstek 2 Maximum Charge Power"
        unique_id: marstek_2_max_charge_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {{ states('sensor.marstek_2_capacity_and_power_registers').split(',')[2] | int(1) }}

      - name: "Marstek 2 Maximum Discharge Power"
        unique_id: marstek_2_max_discharge_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {{ states('sensor.marstek_2_capacity_and_power_registers').split(',')[3] | int(1) }}

      - name: "Marstek 2 Battery Cell Voltage Delta"
        unique_id: marstek_2_battery_cell_voltage_delta
        unit_of_measurement: "V"
        device_class: voltage
        state_class: measurement
        state: >
          {{ ((states('sensor.marstek_2_battery_maximum_cell_voltage') | round(3) | float) - (states('sensor.marstek_2_battery_minimum_cell_voltage') | round(3) | float)) | round(3) | float }}

#---------
# SWITCHES
#---------
switch:
  - platform: template
    switches:
      marstek_2_rs485_control_mode_switch:
        friendly_name: "Marstek 2 RS485 Control Mode Switch"
        unique_id: marstek_2_rs485_control_mode_switch
        value_template: >
          {% set mode = states('sensor.marstek_2_rs485_control_mode') | int %}
          {{ mode == 21930 }}  # True (ON) when Enabled (21930), False (OFF) otherwise
        turn_on:
          action: modbus.write_register
          data:
            hub: MarstekVenus2
            unit: 1
            address: 42000
            value: 21930 # Write 0x55AA to enable RS485 control mode
        turn_off:
          action: modbus.write_register
          data:
            hub: MarstekVenus2
            unit: 1
            address: 42000
            value: 21947 # Write 0x55BB to disable RS485 control mode

# -------
# SENSORS
# -------
sensor:
  - platform: integration
    name: Marstek 2 Discharging in kWh
    unique_id: marstek_2_discharging_in_kwh
    source: sensor.marstek_2_discharging_in_w
    round: 2
    unit_prefix: k
    unit_time: h
    method: left
  - platform: integration
    name: Marstek 2 Charging in kWh
    unique_id: marstek_2_charging_in_kwh
    source: sensor.marstek_2_charging_in_w
    round: 2
    unit_prefix: k
    unit_time: h
    method: left

# --------------
# UTILITY METERS
# --------------
utility_meter:
  daily_discharge_2:
    name: Marstek 2 Daily Discharging in kWh
    unique_id: marstek_2_daily_discharging_in_kwh
    source: sensor.marstek_2_discharging_in_kwh
    cycle: daily

  daily_charge_2:
    name: Marstek 2 Daily Charging in kWh
    unique_id: marstek_2_daily_charging_in_kwh
    source: sensor.marstek_2_charging_in_kwh
    cycle: daily
